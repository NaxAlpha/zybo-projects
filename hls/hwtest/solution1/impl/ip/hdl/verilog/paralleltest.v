// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2016.3
// Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="paralleltest,hls_ip_2016_3,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z010clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.360000,HLS_SYN_LAT=2,HLS_SYN_TPT=none,HLS_SYN_MEM=2,HLS_SYN_DSP=0,HLS_SYN_FF=24,HLS_SYN_LUT=159}" *)

module paralleltest (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        p_doWrite,
        p_writeAddr,
        p_writeData,
        p_doRead,
        p_readAddr,
        p_readData,
        p_readData_ap_vld
);

parameter    ap_ST_fsm_state1 = 3'b1;
parameter    ap_ST_fsm_state2 = 3'b10;
parameter    ap_ST_fsm_state3 = 3'b100;
parameter    ap_const_lv32_0 = 32'b00000000000000000000000000000000;
parameter    ap_const_lv32_1 = 32'b1;
parameter    ap_const_lv32_2 = 32'b10;
parameter    ap_const_lv32_1F = 32'b11111;
parameter    ap_const_lv22_0 = 22'b0000000000000000000000;
parameter    ap_const_lv10_0 = 10'b0000000000;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input   p_doWrite;
input  [31:0] p_writeAddr;
input  [31:0] p_writeData;
input   p_doRead;
input  [31:0] p_readAddr;
output  [31:0] p_readData;
output   p_readData_ap_vld;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg p_readData_ap_vld;

(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire   [0:0] ap_CS_fsm_state1;
reg   [9:0] buffer_r_address0;
reg    buffer_r_ce0;
reg    buffer_r_we0;
wire   [31:0] buffer_r_q0;
wire   [0:0] p_doRead_read_read_fu_44_p2;
reg   [0:0] tmp_6_reg_207;
wire   [9:0] tmp_7_fu_158_p1;
reg   [9:0] tmp_7_reg_212;
wire   [9:0] tmp_8_fu_162_p1;
reg   [9:0] tmp_8_reg_217;
wire   [0:0] ap_CS_fsm_state2;
wire   [31:0] tmp_fu_141_p3;
wire   [0:0] p_doWrite_read_read_fu_62_p2;
wire   [31:0] tmp_1_fu_192_p3;
wire   [0:0] ap_CS_fsm_state3;
wire   [9:0] tmp_3_fu_105_p1;
wire   [9:0] tmp_4_fu_117_p1;
wire   [9:0] tmp_5_fu_121_p2;
wire   [31:0] p_and_t_fu_127_p3;
wire   [0:0] tmp_2_fu_97_p3;
wire   [31:0] p_neg_t_fu_135_p2;
wire   [31:0] p_and_f_fu_109_p3;
wire   [9:0] tmp_9_fu_173_p2;
wire   [31:0] p_and_t5_fu_178_p3;
wire   [31:0] p_neg_t6_fu_186_p2;
wire   [31:0] p_and_f3_fu_166_p3;
reg   [2:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 3'b1;
end

paralleltest_buffbkb #(
    .DataWidth( 32 ),
    .AddressRange( 1024 ),
    .AddressWidth( 10 ))
buffer_r_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(buffer_r_address0),
    .ce0(buffer_r_ce0),
    .we0(buffer_r_we0),
    .d0(p_writeData),
    .q0(buffer_r_q0)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_CS_fsm_state1 == 1'b1) & ~(ap_start == 1'b0) & ~(p_doRead_read_read_fu_44_p2 == 1'b0))) begin
        tmp_6_reg_207 <= p_readAddr[ap_const_lv32_1F];
        tmp_7_reg_212 <= tmp_7_fu_158_p1;
        tmp_8_reg_217 <= tmp_8_fu_162_p1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (ap_CS_fsm_state1 == 1'b1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        buffer_r_address0 = tmp_1_fu_192_p3;
    end else if ((ap_CS_fsm_state1 == 1'b1)) begin
        buffer_r_address0 = tmp_fu_141_p3;
    end else begin
        buffer_r_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((ap_CS_fsm_state1 == 1'b1) & ~(ap_start == 1'b0)) | (1'b1 == ap_CS_fsm_state2))) begin
        buffer_r_ce0 = 1'b1;
    end else begin
        buffer_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_CS_fsm_state1 == 1'b1) & ~(ap_start == 1'b0) & ~(1'b0 == p_doWrite_read_read_fu_62_p2))) begin
        buffer_r_we0 = 1'b1;
    end else begin
        buffer_r_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((~(p_doRead_read_read_fu_44_p2 == 1'b0) & (1'b1 == ap_CS_fsm_state3))) begin
        p_readData_ap_vld = 1'b1;
    end else begin
        p_readData_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~(ap_start == 1'b0) & (p_doRead_read_read_fu_44_p2 == 1'b0))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else if ((~(ap_start == 1'b0) & ~(p_doRead_read_read_fu_44_p2 == 1'b0))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[ap_const_lv32_0];

assign ap_CS_fsm_state2 = ap_CS_fsm[ap_const_lv32_1];

assign ap_CS_fsm_state3 = ap_CS_fsm[ap_const_lv32_2];

assign p_and_f3_fu_166_p3 = {{ap_const_lv22_0}, {tmp_7_reg_212}};

assign p_and_f_fu_109_p3 = {{ap_const_lv22_0}, {tmp_3_fu_105_p1}};

assign p_and_t5_fu_178_p3 = {{ap_const_lv22_0}, {tmp_9_fu_173_p2}};

assign p_and_t_fu_127_p3 = {{ap_const_lv22_0}, {tmp_5_fu_121_p2}};

assign p_doRead_read_read_fu_44_p2 = p_doRead;

assign p_doWrite_read_read_fu_62_p2 = p_doWrite;

assign p_neg_t6_fu_186_p2 = (ap_const_lv32_0 - p_and_t5_fu_178_p3);

assign p_neg_t_fu_135_p2 = (ap_const_lv32_0 - p_and_t_fu_127_p3);

assign p_readData = buffer_r_q0;

assign tmp_1_fu_192_p3 = ((tmp_6_reg_207[0:0] === 1'b1) ? p_neg_t6_fu_186_p2 : p_and_f3_fu_166_p3);

assign tmp_2_fu_97_p3 = p_writeAddr[ap_const_lv32_1F];

assign tmp_3_fu_105_p1 = p_writeAddr[9:0];

assign tmp_4_fu_117_p1 = p_writeAddr[9:0];

assign tmp_5_fu_121_p2 = (ap_const_lv10_0 - tmp_4_fu_117_p1);

assign tmp_7_fu_158_p1 = p_readAddr[9:0];

assign tmp_8_fu_162_p1 = p_readAddr[9:0];

assign tmp_9_fu_173_p2 = (ap_const_lv10_0 - tmp_8_reg_217);

assign tmp_fu_141_p3 = ((tmp_2_fu_97_p3[0:0] === 1'b1) ? p_neg_t_fu_135_p2 : p_and_f_fu_109_p3);

endmodule //paralleltest
