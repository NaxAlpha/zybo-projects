// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2016.3
// Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "paralleltest.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic paralleltest::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic paralleltest::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<3> paralleltest::ap_ST_fsm_state1 = "1";
const sc_lv<3> paralleltest::ap_ST_fsm_state2 = "10";
const sc_lv<3> paralleltest::ap_ST_fsm_state3 = "100";
const sc_lv<32> paralleltest::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<1> paralleltest::ap_const_lv1_1 = "1";
const sc_lv<1> paralleltest::ap_const_lv1_0 = "0";
const sc_lv<32> paralleltest::ap_const_lv32_1 = "1";
const sc_lv<32> paralleltest::ap_const_lv32_2 = "10";
const sc_lv<32> paralleltest::ap_const_lv32_1F = "11111";
const sc_lv<22> paralleltest::ap_const_lv22_0 = "0000000000000000000000";
const sc_lv<10> paralleltest::ap_const_lv10_0 = "0000000000";

paralleltest::paralleltest(sc_module_name name) : sc_module(name), mVcdFile(0) {
    buffer_r_U = new paralleltest_buffbkb("buffer_r_U");
    buffer_r_U->clk(ap_clk);
    buffer_r_U->reset(ap_rst);
    buffer_r_U->address0(buffer_r_address0);
    buffer_r_U->ce0(buffer_r_ce0);
    buffer_r_U->we0(buffer_r_we0);
    buffer_r_U->d0(p_writeData);
    buffer_r_U->q0(buffer_r_q0);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_buffer_r_address0);
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( tmp_fu_141_p3 );
    sensitive << ( tmp_1_fu_192_p3 );

    SC_METHOD(thread_buffer_r_ce0);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_buffer_r_we0);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( p_doWrite_read_read_fu_62_p2 );

    SC_METHOD(thread_p_and_f3_fu_166_p3);
    sensitive << ( tmp_7_reg_212 );

    SC_METHOD(thread_p_and_f_fu_109_p3);
    sensitive << ( tmp_3_fu_105_p1 );

    SC_METHOD(thread_p_and_t5_fu_178_p3);
    sensitive << ( tmp_9_fu_173_p2 );

    SC_METHOD(thread_p_and_t_fu_127_p3);
    sensitive << ( tmp_5_fu_121_p2 );

    SC_METHOD(thread_p_doRead_read_read_fu_44_p2);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( p_doRead );

    SC_METHOD(thread_p_doWrite_read_read_fu_62_p2);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( p_doWrite );

    SC_METHOD(thread_p_neg_t6_fu_186_p2);
    sensitive << ( p_and_t5_fu_178_p3 );

    SC_METHOD(thread_p_neg_t_fu_135_p2);
    sensitive << ( p_and_t_fu_127_p3 );

    SC_METHOD(thread_p_readData);
    sensitive << ( buffer_r_q0 );
    sensitive << ( p_doRead_read_read_fu_44_p2 );
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_p_readData_ap_vld);
    sensitive << ( p_doRead_read_read_fu_44_p2 );
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_tmp_1_fu_192_p3);
    sensitive << ( tmp_6_reg_207 );
    sensitive << ( p_neg_t6_fu_186_p2 );
    sensitive << ( p_and_f3_fu_166_p3 );

    SC_METHOD(thread_tmp_2_fu_97_p3);
    sensitive << ( p_writeAddr );

    SC_METHOD(thread_tmp_3_fu_105_p1);
    sensitive << ( p_writeAddr );

    SC_METHOD(thread_tmp_4_fu_117_p1);
    sensitive << ( p_writeAddr );

    SC_METHOD(thread_tmp_5_fu_121_p2);
    sensitive << ( tmp_4_fu_117_p1 );

    SC_METHOD(thread_tmp_7_fu_158_p1);
    sensitive << ( p_readAddr );

    SC_METHOD(thread_tmp_8_fu_162_p1);
    sensitive << ( p_readAddr );

    SC_METHOD(thread_tmp_9_fu_173_p2);
    sensitive << ( tmp_8_reg_217 );

    SC_METHOD(thread_tmp_fu_141_p3);
    sensitive << ( tmp_2_fu_97_p3 );
    sensitive << ( p_neg_t_fu_135_p2 );
    sensitive << ( p_and_f_fu_109_p3 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( p_doRead_read_read_fu_44_p2 );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    ap_CS_fsm = "001";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "paralleltest_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, p_doWrite, "(port)p_doWrite");
    sc_trace(mVcdFile, p_writeAddr, "(port)p_writeAddr");
    sc_trace(mVcdFile, p_writeData, "(port)p_writeData");
    sc_trace(mVcdFile, p_doRead, "(port)p_doRead");
    sc_trace(mVcdFile, p_readAddr, "(port)p_readAddr");
    sc_trace(mVcdFile, p_readData, "(port)p_readData");
    sc_trace(mVcdFile, p_readData_ap_vld, "(port)p_readData_ap_vld");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, buffer_r_address0, "buffer_r_address0");
    sc_trace(mVcdFile, buffer_r_ce0, "buffer_r_ce0");
    sc_trace(mVcdFile, buffer_r_we0, "buffer_r_we0");
    sc_trace(mVcdFile, buffer_r_q0, "buffer_r_q0");
    sc_trace(mVcdFile, p_doRead_read_read_fu_44_p2, "p_doRead_read_read_fu_44_p2");
    sc_trace(mVcdFile, tmp_6_reg_207, "tmp_6_reg_207");
    sc_trace(mVcdFile, tmp_7_fu_158_p1, "tmp_7_fu_158_p1");
    sc_trace(mVcdFile, tmp_7_reg_212, "tmp_7_reg_212");
    sc_trace(mVcdFile, tmp_8_fu_162_p1, "tmp_8_fu_162_p1");
    sc_trace(mVcdFile, tmp_8_reg_217, "tmp_8_reg_217");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, tmp_fu_141_p3, "tmp_fu_141_p3");
    sc_trace(mVcdFile, p_doWrite_read_read_fu_62_p2, "p_doWrite_read_read_fu_62_p2");
    sc_trace(mVcdFile, tmp_1_fu_192_p3, "tmp_1_fu_192_p3");
    sc_trace(mVcdFile, ap_CS_fsm_state3, "ap_CS_fsm_state3");
    sc_trace(mVcdFile, tmp_3_fu_105_p1, "tmp_3_fu_105_p1");
    sc_trace(mVcdFile, tmp_4_fu_117_p1, "tmp_4_fu_117_p1");
    sc_trace(mVcdFile, tmp_5_fu_121_p2, "tmp_5_fu_121_p2");
    sc_trace(mVcdFile, p_and_t_fu_127_p3, "p_and_t_fu_127_p3");
    sc_trace(mVcdFile, tmp_2_fu_97_p3, "tmp_2_fu_97_p3");
    sc_trace(mVcdFile, p_neg_t_fu_135_p2, "p_neg_t_fu_135_p2");
    sc_trace(mVcdFile, p_and_f_fu_109_p3, "p_and_f_fu_109_p3");
    sc_trace(mVcdFile, tmp_9_fu_173_p2, "tmp_9_fu_173_p2");
    sc_trace(mVcdFile, p_and_t5_fu_178_p3, "p_and_t5_fu_178_p3");
    sc_trace(mVcdFile, p_neg_t6_fu_186_p2, "p_neg_t6_fu_186_p2");
    sc_trace(mVcdFile, p_and_f3_fu_166_p3, "p_and_f3_fu_166_p3");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
    mHdltvinHandle.open("paralleltest.hdltvin.dat");
    mHdltvoutHandle.open("paralleltest.hdltvout.dat");
}

paralleltest::~paralleltest() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
    delete buffer_r_U;
}

void paralleltest::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ((esl_seteq<1,1,1>(ap_CS_fsm_state1.read(), ap_const_lv1_1) && !esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0) && !esl_seteq<1,1,1>(p_doRead_read_read_fu_44_p2.read(), ap_const_lv1_0))) {
        tmp_6_reg_207 = p_readAddr.read().range(31, 31);
        tmp_7_reg_212 = tmp_7_fu_158_p1.read();
        tmp_8_reg_217 = tmp_8_fu_162_p1.read();
    }
}

void paralleltest::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read().range(0, 0);
}

void paralleltest::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read().range(1, 1);
}

void paralleltest::thread_ap_CS_fsm_state3() {
    ap_CS_fsm_state3 = ap_CS_fsm.read().range(2, 2);
}

void paralleltest::thread_ap_done() {
    if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state3.read()))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void paralleltest::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_CS_fsm_state1.read(), ap_const_lv1_1))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void paralleltest::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state3.read()))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void paralleltest::thread_buffer_r_address0() {
    if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state2.read()))) {
        buffer_r_address0 =  (sc_lv<10>) (tmp_1_fu_192_p3.read());
    } else if ((esl_seteq<1,1,1>(ap_CS_fsm_state1.read(), ap_const_lv1_1))) {
        buffer_r_address0 =  (sc_lv<10>) (tmp_fu_141_p3.read());
    } else {
        buffer_r_address0 = "XXXXXXXXXX";
    }
}

void paralleltest::thread_buffer_r_ce0() {
    if (((esl_seteq<1,1,1>(ap_CS_fsm_state1.read(), ap_const_lv1_1) && 
          !esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0)) || 
         (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state2.read())))) {
        buffer_r_ce0 = ap_const_logic_1;
    } else {
        buffer_r_ce0 = ap_const_logic_0;
    }
}

void paralleltest::thread_buffer_r_we0() {
    if (((esl_seteq<1,1,1>(ap_CS_fsm_state1.read(), ap_const_lv1_1) && 
          !esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0) && 
          !esl_seteq<1,1,1>(ap_const_lv1_0, p_doWrite_read_read_fu_62_p2.read())))) {
        buffer_r_we0 = ap_const_logic_1;
    } else {
        buffer_r_we0 = ap_const_logic_0;
    }
}

void paralleltest::thread_p_and_f3_fu_166_p3() {
    p_and_f3_fu_166_p3 = esl_concat<22,10>(ap_const_lv22_0, tmp_7_reg_212.read());
}

void paralleltest::thread_p_and_f_fu_109_p3() {
    p_and_f_fu_109_p3 = esl_concat<22,10>(ap_const_lv22_0, tmp_3_fu_105_p1.read());
}

void paralleltest::thread_p_and_t5_fu_178_p3() {
    p_and_t5_fu_178_p3 = esl_concat<22,10>(ap_const_lv22_0, tmp_9_fu_173_p2.read());
}

void paralleltest::thread_p_and_t_fu_127_p3() {
    p_and_t_fu_127_p3 = esl_concat<22,10>(ap_const_lv22_0, tmp_5_fu_121_p2.read());
}

void paralleltest::thread_p_doRead_read_read_fu_44_p2() {
    p_doRead_read_read_fu_44_p2 =  (sc_lv<1>) (p_doRead.read());
}

void paralleltest::thread_p_doWrite_read_read_fu_62_p2() {
    p_doWrite_read_read_fu_62_p2 =  (sc_lv<1>) (p_doWrite.read());
}

void paralleltest::thread_p_neg_t6_fu_186_p2() {
    p_neg_t6_fu_186_p2 = (!ap_const_lv32_0.is_01() || !p_and_t5_fu_178_p3.read().is_01())? sc_lv<32>(): (sc_biguint<32>(ap_const_lv32_0) - sc_biguint<32>(p_and_t5_fu_178_p3.read()));
}

void paralleltest::thread_p_neg_t_fu_135_p2() {
    p_neg_t_fu_135_p2 = (!ap_const_lv32_0.is_01() || !p_and_t_fu_127_p3.read().is_01())? sc_lv<32>(): (sc_biguint<32>(ap_const_lv32_0) - sc_biguint<32>(p_and_t_fu_127_p3.read()));
}

void paralleltest::thread_p_readData() {
    p_readData = buffer_r_q0.read();
}

void paralleltest::thread_p_readData_ap_vld() {
    if ((!esl_seteq<1,1,1>(p_doRead_read_read_fu_44_p2.read(), ap_const_lv1_0) && 
         esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state3.read()))) {
        p_readData_ap_vld = ap_const_logic_1;
    } else {
        p_readData_ap_vld = ap_const_logic_0;
    }
}

void paralleltest::thread_tmp_1_fu_192_p3() {
    tmp_1_fu_192_p3 = (!tmp_6_reg_207.read()[0].is_01())? sc_lv<32>(): ((tmp_6_reg_207.read()[0].to_bool())? p_neg_t6_fu_186_p2.read(): p_and_f3_fu_166_p3.read());
}

void paralleltest::thread_tmp_2_fu_97_p3() {
    tmp_2_fu_97_p3 = p_writeAddr.read().range(31, 31);
}

void paralleltest::thread_tmp_3_fu_105_p1() {
    tmp_3_fu_105_p1 = p_writeAddr.read().range(10-1, 0);
}

void paralleltest::thread_tmp_4_fu_117_p1() {
    tmp_4_fu_117_p1 = p_writeAddr.read().range(10-1, 0);
}

void paralleltest::thread_tmp_5_fu_121_p2() {
    tmp_5_fu_121_p2 = (!ap_const_lv10_0.is_01() || !tmp_4_fu_117_p1.read().is_01())? sc_lv<10>(): (sc_biguint<10>(ap_const_lv10_0) - sc_biguint<10>(tmp_4_fu_117_p1.read()));
}

void paralleltest::thread_tmp_7_fu_158_p1() {
    tmp_7_fu_158_p1 = p_readAddr.read().range(10-1, 0);
}

void paralleltest::thread_tmp_8_fu_162_p1() {
    tmp_8_fu_162_p1 = p_readAddr.read().range(10-1, 0);
}

void paralleltest::thread_tmp_9_fu_173_p2() {
    tmp_9_fu_173_p2 = (!ap_const_lv10_0.is_01() || !tmp_8_reg_217.read().is_01())? sc_lv<10>(): (sc_biguint<10>(ap_const_lv10_0) - sc_biguint<10>(tmp_8_reg_217.read()));
}

void paralleltest::thread_tmp_fu_141_p3() {
    tmp_fu_141_p3 = (!tmp_2_fu_97_p3.read()[0].is_01())? sc_lv<32>(): ((tmp_2_fu_97_p3.read()[0].to_bool())? p_neg_t_fu_135_p2.read(): p_and_f_fu_109_p3.read());
}

void paralleltest::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((!esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0) && esl_seteq<1,1,1>(p_doRead_read_read_fu_44_p2.read(), ap_const_lv1_0))) {
                ap_NS_fsm = ap_ST_fsm_state3;
            } else if ((!esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0) && !esl_seteq<1,1,1>(p_doRead_read_read_fu_44_p2.read(), ap_const_lv1_0))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            ap_NS_fsm = ap_ST_fsm_state3;
            break;
        case 4 : 
            ap_NS_fsm = ap_ST_fsm_state1;
            break;
        default : 
            ap_NS_fsm =  (sc_lv<3>) ("XXX");
            break;
    }
}

void paralleltest::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"ap_rst\" :  \"" << ap_rst.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"ap_start\" :  \"" << ap_start.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"ap_done\" :  \"" << ap_done.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_idle\" :  \"" << ap_idle.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_ready\" :  \"" << ap_ready.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"p_doWrite\" :  \"" << p_doWrite.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"p_writeAddr\" :  \"" << p_writeAddr.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"p_writeData\" :  \"" << p_writeData.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"p_doRead\" :  \"" << p_doRead.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"p_readAddr\" :  \"" << p_readAddr.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"p_readData\" :  \"" << p_readData.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"p_readData_ap_vld\" :  \"" << p_readData_ap_vld.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

