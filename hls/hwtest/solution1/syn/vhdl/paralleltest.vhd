-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2016.3
-- Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity paralleltest is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    p_doWrite : IN STD_LOGIC;
    p_writeAddr : IN STD_LOGIC_VECTOR (31 downto 0);
    p_writeData : IN STD_LOGIC_VECTOR (31 downto 0);
    p_doRead : IN STD_LOGIC;
    p_readAddr : IN STD_LOGIC_VECTOR (31 downto 0);
    p_readData : OUT STD_LOGIC_VECTOR (31 downto 0);
    p_readData_ap_vld : OUT STD_LOGIC );
end;


architecture behav of paralleltest is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "paralleltest,hls_ip_2016_3,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z010clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.360000,HLS_SYN_LAT=2,HLS_SYN_TPT=none,HLS_SYN_MEM=2,HLS_SYN_DSP=0,HLS_SYN_FF=24,HLS_SYN_LUT=159}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv22_0 : STD_LOGIC_VECTOR (21 downto 0) := "0000000000000000000000";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (2 downto 0) := "001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal buffer_r_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal buffer_r_ce0 : STD_LOGIC;
    signal buffer_r_we0 : STD_LOGIC;
    signal buffer_r_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_doRead_read_read_fu_44_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_6_reg_207 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_7_fu_158_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_7_reg_212 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_8_fu_162_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_8_reg_217 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal tmp_fu_141_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_doWrite_read_read_fu_62_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_1_fu_192_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal tmp_3_fu_105_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_4_fu_117_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_5_fu_121_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_and_t_fu_127_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_fu_97_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_neg_t_fu_135_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_and_f_fu_109_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_9_fu_173_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_and_t5_fu_178_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_neg_t6_fu_186_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_and_f3_fu_166_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (2 downto 0);

    component paralleltest_buffbkb IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    buffer_r_U : component paralleltest_buffbkb
    generic map (
        DataWidth => 32,
        AddressRange => 1024,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => buffer_r_address0,
        ce0 => buffer_r_ce0,
        we0 => buffer_r_we0,
        d0 => p_writeData,
        q0 => buffer_r_q0);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_CS_fsm_state1 = ap_const_lv1_1) and not((ap_start = ap_const_logic_0)) and not((p_doRead_read_read_fu_44_p2 = ap_const_lv1_0)))) then
                tmp_6_reg_207 <= p_readAddr(31 downto 31);
                tmp_7_reg_212 <= tmp_7_fu_158_p1;
                tmp_8_reg_217 <= tmp_8_fu_162_p1;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, p_doRead_read_read_fu_44_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not((ap_start = ap_const_logic_0)) and (p_doRead_read_read_fu_44_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                elsif ((not((ap_start = ap_const_logic_0)) and not((p_doRead_read_read_fu_44_p2 = ap_const_lv1_0)))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0 downto 0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1 downto 1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2 downto 2);

    ap_done_assign_proc : process(ap_CS_fsm_state3)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state3))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_0 = ap_start) and (ap_CS_fsm_state1 = ap_const_lv1_1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state3)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state3))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    buffer_r_address0_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state2, tmp_fu_141_p3, tmp_1_fu_192_p3)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state2))) then 
            buffer_r_address0 <= tmp_1_fu_192_p3(10 - 1 downto 0);
        elsif (((ap_CS_fsm_state1 = ap_const_lv1_1))) then 
            buffer_r_address0 <= tmp_fu_141_p3(10 - 1 downto 0);
        else 
            buffer_r_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    buffer_r_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2)
    begin
        if ((((ap_CS_fsm_state1 = ap_const_lv1_1) and not((ap_start = ap_const_logic_0))) or ((ap_const_lv1_1 = ap_CS_fsm_state2)))) then 
            buffer_r_ce0 <= ap_const_logic_1;
        else 
            buffer_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    buffer_r_we0_assign_proc : process(ap_start, ap_CS_fsm_state1, p_doWrite_read_read_fu_62_p2)
    begin
        if ((((ap_CS_fsm_state1 = ap_const_lv1_1) and not((ap_start = ap_const_logic_0)) and not((ap_const_lv1_0 = p_doWrite_read_read_fu_62_p2))))) then 
            buffer_r_we0 <= ap_const_logic_1;
        else 
            buffer_r_we0 <= ap_const_logic_0;
        end if; 
    end process;

    p_and_f3_fu_166_p3 <= (ap_const_lv22_0 & tmp_7_reg_212);
    p_and_f_fu_109_p3 <= (ap_const_lv22_0 & tmp_3_fu_105_p1);
    p_and_t5_fu_178_p3 <= (ap_const_lv22_0 & tmp_9_fu_173_p2);
    p_and_t_fu_127_p3 <= (ap_const_lv22_0 & tmp_5_fu_121_p2);
    p_doRead_read_read_fu_44_p2 <= (0=>p_doRead, others=>'-');
    p_doWrite_read_read_fu_62_p2 <= (0=>p_doWrite, others=>'-');
    p_neg_t6_fu_186_p2 <= std_logic_vector(unsigned(ap_const_lv32_0) - unsigned(p_and_t5_fu_178_p3));
    p_neg_t_fu_135_p2 <= std_logic_vector(unsigned(ap_const_lv32_0) - unsigned(p_and_t_fu_127_p3));
    p_readData <= buffer_r_q0;

    p_readData_ap_vld_assign_proc : process(p_doRead_read_read_fu_44_p2, ap_CS_fsm_state3)
    begin
        if ((not((p_doRead_read_read_fu_44_p2 = ap_const_lv1_0)) and (ap_const_lv1_1 = ap_CS_fsm_state3))) then 
            p_readData_ap_vld <= ap_const_logic_1;
        else 
            p_readData_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    tmp_1_fu_192_p3 <= 
        p_neg_t6_fu_186_p2 when (tmp_6_reg_207(0) = '1') else 
        p_and_f3_fu_166_p3;
    tmp_2_fu_97_p3 <= p_writeAddr(31 downto 31);
    tmp_3_fu_105_p1 <= p_writeAddr(10 - 1 downto 0);
    tmp_4_fu_117_p1 <= p_writeAddr(10 - 1 downto 0);
    tmp_5_fu_121_p2 <= std_logic_vector(unsigned(ap_const_lv10_0) - unsigned(tmp_4_fu_117_p1));
    tmp_7_fu_158_p1 <= p_readAddr(10 - 1 downto 0);
    tmp_8_fu_162_p1 <= p_readAddr(10 - 1 downto 0);
    tmp_9_fu_173_p2 <= std_logic_vector(unsigned(ap_const_lv10_0) - unsigned(tmp_8_reg_217));
    tmp_fu_141_p3 <= 
        p_neg_t_fu_135_p2 when (tmp_2_fu_97_p3(0) = '1') else 
        p_and_f_fu_109_p3;
end behav;
